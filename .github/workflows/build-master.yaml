name: Lint, Build and Dockerize

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  generate-tag:
    runs-on: ubuntu-latest
    outputs:
      timestamp-tag: ${{ steps.set_tag.outputs.timestamp }}
    steps:
      - id: set_tag
        run: echo "timestamp=$(date -u +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_OUTPUT

  build-frontend:
    needs: generate-tag
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    env:
      TIMESTAMP_TAG: ${{ needs.generate-tag.outputs.timestamp-tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        if: success()
        run: npm run build --configuration=production

      - name: Set up Docker Buildx
        if: success() && github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        if: success() && github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/chat_app:latest
            ghcr.io/${{ github.repository_owner }}/chat_app:${{ env.TIMESTAMP_TAG }}

  build-backend:
    needs: generate-tag
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    env:
      TIMESTAMP_TAG: ${{ needs.generate-tag.outputs.timestamp-tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean install

      - name: Set up Docker Buildx
        if: success() && github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        if: success() && github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/chat_app_backend:latest
            ghcr.io/${{ github.repository_owner }}/chat_app_backend:${{ env.TIMESTAMP_TAG }}
